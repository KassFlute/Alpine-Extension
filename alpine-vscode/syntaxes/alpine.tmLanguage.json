{
    "scopeName": "source.alpine",
    "fileTypes": ["alpine"],
    "patterns": [
        {
            "match": "(//\\p{blank}?)({(\\p{blank}?(TODO)|(Todo)|(todo)\\p{blank}?)}:?)(.*)$",
            "captures":{
                "1":{
                    "name":"comment.line.double-slash.alpine"
                },
                "2":{"name":"comment.line.double-slash.todo.alpine"},
                "3":{"name":"comment.line.double-slash.todo.keyword.alpine"},
                "4":{"name":"comment.line.double-slash.todo.keyword.alpine"},
                "5":{"name":"comment.line.double-slash.todo.keyword.alpine"},
                "6":{"name":"comment.line.double-slash.todo.keyword.alpine"},
                "7":{"name":"comment.line.double-slash.alpine"}
            }
        },
        {
            "match": "(//\\p{blank}?)((TODO)|(Todo)|(todo))(:|\\p{blank})(.*)$",
            "captures":{
                "1":{
                    "name":"comment.line.double-slash.alpine"
                },
                "2":{"name":"comment.line.double-slash.todo.alpine"},
                "3":{"name":"comment.line.double-slash.todo.keyword.alpine"},
                "4":{"name":"comment.line.double-slash.todo.keyword.alpine"},
                "5":{"name":"comment.line.double-slash.todo.keyword.alpine"},
                "6":{"name":"comment.line.double-slash.todo.alpine"},
                "7":{"name":"comment.line.double-slash.alpine"}
            }
        },
        {
            "match":"//\\p{blank}?.*$",
            "name":"comment.line.double-slash.alpine"
        },
        {
            "name": "keyword.operator.alpine",
            "match": "\\b(in|of|as|by)\\b"
        },
        {
            "name": "keyword.control.alpine",
            "match": "\\b(let|fun|type|match|case|then|else)\\b"
        },
        {
            "name": "keyword.operator.infix.alpine",
            "match": "(@!)|(@\\?)|@|(->)|\\||(::)|\\+|-|\\*|\\/"
        },
        {
            "name": "keyword.operator.boolean.alpine",
            "match": "(>=)|(<=)|(==)|>|<|(\\|\\|)|(&&)"
        },
        {
            "name": "constant.language.alpine",
            "match": "\\b(true|false|null)\\b"
        },
        {
            "name": "constant.numeric.alpine",
            "match": "\\b\\d+(\\.\\d+)?\\b"
        },
        {
            "name": "string.quoted.double.alpine",
            "begin": "\"",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.alpine"
                }
            },
            "end": "\"",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end.alpine"
                }
            },
            "patterns": [
                {
                    "include":"#escaped_chars",
                    "name":"constant.character.escape"
                }
            ]
        },
        {
            "name":"storage.type.alpine",
            "match":"\\b(Any|_)\\b"
        },
        {
            "name":"support.class.alpine",
            "match":"\\b([A-Z]){1}([a-z]){0,}\\b"
        },
        {
            "name":"variable.alpine",
            "match":"\\b([a-z0-9]|_){1,}\\b"
        },
        {
            "name":"support.type.record.alpine",
            "match":"(#)(\\w)+"
        }
    ],
    "repository": {
        "escaped_chars": {
            "match":"\\x5C.",
            "name":"constant.character.escape"
        }
    }
}